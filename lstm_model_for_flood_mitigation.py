# -*- coding: utf-8 -*-
"""LSTM Model for Flood Mitigation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pJV804PzNp67V4x5ppYFRyv6YvkgwEBo
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping

from google.colab import files
uploaded = files.upload()

# Load Dataset
df = pd.read_csv('modis_flood_features_cleaned_v1.1.csv', parse_dates=['date'])

df.info()

# Preprocessing
X = df.drop(columns=['date', 'target', 'flooded','jrc_perm_water'])
y = df['target']
X = X.apply(pd.to_numeric, errors='coerce').fillna(0)

# Normalisasi
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Reshape untuk LSTM
X_reshaped = X_scaled.reshape((X_scaled.shape[0], 1, X_scaled.shape[1]))

# Split data
X_train, X_test, y_train, y_test = train_test_split(
    X_reshaped, y, test_size=0.2, stratify=y, random_state=42)

#LSTM
model = Sequential()
model.add(LSTM(64, input_shape=(X_train.shape[1], X_train.shape[2]), return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(32, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

early_stop = EarlyStopping(monitor='val_loss', patience=3)

model.fit(X_train, y_train, validation_data=(X_test, y_test),
          epochs=15, batch_size=512, callbacks=[early_stop], verbose=1)

#Evaluasi LSTM
y_pred = (model.predict(X_test) > 0.5).astype('int')
print("\n=== Evaluasi LSTM baseline ===")
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

# LSTM + SMOTE
X_smote_flat = X_scaled
sm = SMOTE(random_state=42)
X_resampled, y_resampled = sm.fit_resample(X_smote_flat, y)

X_resampled_3d = X_resampled.reshape((X_resampled.shape[0], 1, X_resampled.shape[1]))

X_train_s, X_test_s, y_train_s, y_test_s = train_test_split(
    X_resampled_3d, y_resampled, test_size=0.2, random_state=42)

model_sm = Sequential()
model_sm.add(LSTM(64, input_shape=(X_train_s.shape[1], X_train_s.shape[2]), return_sequences=False))
model.add(Dropout(0.2))
model_sm.add(Dense(32, activation='relu'))
model_sm.add(Dense(1, activation='sigmoid'))

model_sm.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model_sm.fit(X_train_s, y_train_s, validation_data=(X_test_s, y_test_s),
             epochs=15, batch_size=512, callbacks=[early_stop], verbose=1)

# Evaluasi LSTM + SMOTE
y_pred_sm = (model_sm.predict(X_test_s) > 0.5).astype('int')
print("\n=== Evaluasi LSTM Dengan SMOTE ===")
print(confusion_matrix(y_test_s, y_pred_sm))
print(classification_report(y_test_s, y_pred_sm))

from imblearn.under_sampling import RandomUnderSampler
#LSTM + Undersampling
X_train_2d, X_test_2d, y_train_under, y_test_under = train_test_split(
    X_scaled, y, test_size=0.2, stratify=y, random_state=42)

rus = RandomUnderSampler(random_state=42)
X_under, y_under = rus.fit_resample(X_train_2d, y_train_under)

X_under_3d = X_under.reshape((X_under.shape[0], 1, X_under.shape[1]))

model_under = Sequential()
model_under.add(LSTM(64, input_shape=(X_under_3d.shape[1], X_under_3d.shape[2])))
model_under.add(Dense(1, activation='sigmoid'))

model_under.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

early_stop_under = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

history_under = model_under.fit(
    X_under_3d, y_under,
    epochs=50,
    batch_size=32,
    validation_split=0.2,
    callbacks=[early_stop_under],
    verbose=2
)

#Evaluasi LSTM + Undersampling
import matplotlib.pyplot as plt
from sklearn.metrics import roc_auc_score
import seaborn as sns
X_test_3d = X_test_2d.reshape((X_test_2d.shape[0], 1, X_test_2d.shape[1]))
y_pred_prob_under = model_under.predict(X_test_3d).flatten()
y_pred_under = (y_pred_prob_under > 0.5).astype(int)

print("=== LSTM + Undersampling ===")
print(classification_report(y_test_under, y_pred_under))
print("ROC AUC:", roc_auc_score(y_test_under, y_pred_prob_under))

sns.heatmap(confusion_matrix(y_test_under, y_pred_under), annot=True, fmt='d', cmap='Purples')
plt.title("Confusion Matrix - LSTM + Undersampling")
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
import seaborn as sns
import matplotlib.pyplot as plt
# LSTM + Feature Selection (RF)
# Feature selection dengan Random Forest
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X, y)

# Ambil 10 fitur terpenting
importances = rf.feature_importances_
top_n = 10
top_features_idx = np.argsort(importances)[::-1][:top_n]
top_features = X.columns[top_features_idx].tolist()

print("Top Features:", top_features)

# Gunakan top features dari RF
X_fs = df[top_features].apply(pd.to_numeric, errors='coerce').fillna(0)

# Normalisasi
X_fs_scaled = scaler.fit_transform(X_fs)

# Reshape untuk LSTM
X_fs_reshaped = X_fs_scaled.reshape((X_fs_scaled.shape[0], 1, X_fs_scaled.shape[1]))

# Split data
X_train_fs, X_test_fs, y_train_fs, y_test_fs = train_test_split(
    X_fs_reshaped, y, test_size=0.2, stratify=y, random_state=42
)

# Model LSTM
model_fs = Sequential()
model_fs.add(LSTM(64, input_shape=(X_train_fs.shape[1], X_train_fs.shape[2])))
model_fs.add(Dense(1, activation='sigmoid'))

model_fs.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
early_stop_fs = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

# Training
history_fs = model_fs.fit(
    X_train_fs, y_train_fs,
    epochs=35,
    batch_size=32,
    validation_split=0.2,
    callbacks=[early_stop_fs],
    verbose=2
)

import seaborn as sns
import matplotlib.pyplot as plt

# Prediksi probabilitas dan klasifikasi
y_pred_prob_fs = model_fs.predict(X_test_fs).flatten()
y_pred_fs = (y_pred_prob_fs > 0.5).astype(int)

# Evaluasi
print("=== LSTM + Feature Selection (RF) ===")
print(classification_report(y_test_fs, y_pred_fs))
print("ROC AUC:", roc_auc_score(y_test_fs, y_pred_prob_fs))

# Confusion matrix
plt.figure(figsize=(6, 4))
sns.heatmap(confusion_matrix(y_test_fs, y_pred_fs), annot=True, fmt='d', cmap='Blues', cbar=False)
plt.title("Confusion Matrix - LSTM + RF Feature Selection")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()