# -*- coding: utf-8 -*-
"""Random Forest Model for Flood Mitigation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LFrl8hgyoABvAMNU51WWJSiJ5Cpkc8RE
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score
import matplotlib.pyplot as plt
import seaborn as sns
from imblearn.over_sampling import SMOTE

from google.colab import files
uploaded = files.upload()

#Load Dataset
import io
df = pd.read_csv('modis_flood_features_cleaned_v1.1.csv', parse_dates=['date'])

df.info()

#Preprocessing
X = df.drop(columns=['date', 'target', 'jrc_perm_water','flooded'])
y = df['target']

#Normalisasi
X = X.apply(pd.to_numeric, errors='coerce').fillna(0)
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

#RF baseline
rf_baseline = RandomForestClassifier(n_estimators=100, random_state=42)
rf_baseline.fit(X_train, y_train)
y_pred_baseline = rf_baseline.predict(X_test)
y_proba_baseline = rf_baseline.predict_proba(X_test)[:, 1]

print("=== RF Baseline ===")
print(classification_report(y_test, y_pred_baseline))
print("ROC AUC:", roc_auc_score(y_test, y_proba_baseline))

sns.heatmap(confusion_matrix(y_test, y_pred_baseline), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix - RF Baseline")
plt.show()

#RF + SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

rf_smote = RandomForestClassifier(n_estimators=100, random_state=42)
rf_smote.fit(X_resampled, y_resampled)

y_pred_smote = rf_smote.predict(X_test)
y_proba_smote = rf_smote.predict_proba(X_test)[:, 1]

print("=== RF + SMOTE ===")
print(classification_report(y_test, y_pred_smote))
print("ROC AUC:", roc_auc_score(y_test, y_proba_smote))

sns.heatmap(confusion_matrix(y_test, y_pred_smote), annot=True, fmt='d', cmap='Greens')
plt.title("Confusion Matrix - RF + SMOTE")
plt.show()

#RF + Feature Selection
importances = rf_baseline.feature_importances_
feat_imp_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances})
feat_imp_df = feat_imp_df.sort_values(by='Importance', ascending=False)

top_n = 10
top_features = feat_imp_df['Feature'].head(top_n).tolist()

print(f"Top {top_n} features:\n", top_features)

rf_fs = RandomForestClassifier(n_estimators=100, random_state=42)
rf_fs.fit(X_train[top_features], y_train)

#Evaluasi RF + Feature Selection
y_pred_fs = rf_fs.predict(X_test[top_features])
y_proba_fs = rf_fs.predict_proba(X_test[top_features])[:, 1]

print("=== RF + Feature Selection ===")
print(classification_report(y_test, y_pred_fs))
print("ROC AUC:", roc_auc_score(y_test, y_proba_fs))

sns.heatmap(confusion_matrix(y_test, y_pred_fs), annot=True, fmt='d', cmap='Oranges')
plt.title("Confusion Matrix - RF + Feature Selection")
plt.show()

#RF + Undersampling
from imblearn.under_sampling import RandomUnderSampler

# ----- Eksperimen 3: RF + Undersampling -----
rus = RandomUnderSampler(random_state=42)
X_under, y_under = rus.fit_resample(X_train, y_train)

rf_under = RandomForestClassifier(n_estimators=100, random_state=42)
rf_under.fit(X_under, y_under)

#Evaluasi RF + Undersampling
y_pred_under = rf_under.predict(X_test)
y_proba_under = rf_under.predict_proba(X_test)[:, 1]

print("=== RF + Undersampling ===")
print(classification_report(y_test, y_pred_under))
print("ROC AUC:", roc_auc_score(y_test, y_proba_under))

sns.heatmap(confusion_matrix(y_test, y_pred_under), annot=True, fmt='d', cmap='Purples')
plt.title("Confusion Matrix - RF + Undersampling")
plt.show()